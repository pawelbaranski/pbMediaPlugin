<?php

/**
 * PluginMediaTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginpbMediaTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PluginMediaTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginpbMedia');
    }

    public function getByRecordModelQuery($record_model)
    {
        $query = $this->createQuery('pbm')
                ->leftJoin('pbm.pbAssignedMedia pbam')
                ->where('pbam.record_model = ?', $record_model);

        return $query;
    }

    /**
     *
     * @param <type> $record_model
     * @param <type> $record_id
     * @return Doctrine_Query
     */
    public function getByRecordModelAndIdQuery($record_model, $record_id)
    {
        $query = $this->getByRecordModelQuery($record_model)
                ->andWhere('pbam.record_id = ?', $record_id);

        return $query;
    }

    public function getByRecordModelWhereIdInQuery($record_model, $record_ids)
    {
        $query = $this->getByRecordModelQuery($record_model)
                ->andWhereIn('pbam.record_id', $record_ids);

        return $query;
    }

//    public function getByRecordQuery($record)
//    {
//        $query = $this->getByRecordModelAndIdQuery(get_class($record), $record->getId());
//
//        return $query;
//    }

    public function getByRecord($record)
    {
        return $this->getByRecordModelAndId(get_class($record), $record->getId());
    }

    public function getByRecordModelAndId($record_model, $record_id)
    {
        return $this->getByRecordModelAndIdQuery($record_model, $record_id)->execute();
    }

//    protected function getFilenamesByRecordQuery($record)
//    {
//        return $this->getFilenamesByRecordModelAndIdQuery(get_class($record), $record->getId());
//    }

    protected function getFilenamesByRecord($record)
    {
        return $this->getFilenamesByRecordModelAndId(get_class($record), $record->getId());
    }

    /**
    * It uses polymorphism so it will return filenames of Images
    * if called by pbImageTable
    * @return Doctrine_Query
    */
    protected function getFilenamesByRecordModelAndIdQuery($record_model, $record_id)
    {
        $query = $this->createQuery()
                ->from('pbMedia pbm INDEXBY pbm.file_name')
                ->leftJoin('pbm.pbAssignedMedia pbam')
                ->where('pbam.record_model = ?', $record_model)
                ->andWhere('pbam.record_id = ?', $record_id);

        return $query;
    }

    protected function getFilenamesByRecordModelAndId($record_model, $record_id)
    {
        $query = $this->getFilenamesByRecordModelAndIdQuery($record_model, $record_id);

        return array_keys($query->fetchArray());
    }

    public function deleteByRecord($record)
    {
        return $this->deleteByRecordModelAndId(get_class($record), $record->getId());
    }

    /**
     * Deletes object from DB as well as files from disc
     * @param <type> $record_model
     * @param <type> $record_id
     */
    public function deleteByRecordModelAndId($record_model, $record_id)
    {
        //delete query is not used here because it would not delete related files
        //like delete method does.
        //in case of more efficient deletion it needs overwriting
        $medias = $this->getByRecordModelAndId($record_model, $record_id);
        return $medias->delete();
    }

    /**
     * Creates delete query. It is not used in plugin directly. Method is put here
     * so it could be easy used in application, outside the plugin
     * @param <type> $record_model
     * @param <type> $record_id
     * @return Doctrine_Collection
     */
    public function deleteByRecordModelAndIdQuery($record_model, $record_id)
    {
        $query = $this->createQuery('pbm')
                ->where('pbm.id IN ('.
                        'SELECT pbam.media_id FROM pbAssignedMedia pbam
                         WHERE pbam.record_model = ? AND pbam.record_id = ?'.
                        ')', array($record_model, $record_id))
                ->delete();

        return $query;
    }
}